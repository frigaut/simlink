// Define gains and other tp level parameters
if (gain_ngs==[])          gain_ngs = -0.5*[1,1];
if (gain_lgs_foc==[])      gain_lgs_foc = -0.5*0;
if (gain_lgs_fsm==[])      gain_lgs_fsm = -0.5;
if (gain_dsm_offload==[])  gain_dsm_offload = 0.001;
if (gain_fsm_offload==[])  gain_fsm_offload = 0.1;
if (loopfreq==[])          loopfreq = 1000.;
if (delay==[])             delay = 10;
if (field==[])             field = 2*[5];
if (turb_downlink_rms==[]) turb_downlink_rms = 0.13;
if (turb_uplink_rms==[])   turb_uplink_rms = 0.15;

/**************************************************************/
// SPECIAL EVENTS IN TIME SERIES.
/**************************************************************/
func events(n)
// n is iteration number in main loop() function
{
  extern nodes,delay;
  // change NGS WFS offset at iteration 50:
  if (n>100) nodes(id_match("ngs_wfs")).offset = [0.,2.0];
  // if (n>1000) nodes(id_match("ngs_wfs")).offset = [0.,-2.0];
  // if (n>400) nodes(id_match("ngs_wfs")).offset = [0.,-1.0];
  // nodes(id_match("ngs_wfs")).offset = [0.,3*(even(round(n/100))-0.5)];
  // if (n>99) delay = 1000;
}

/**************************************************************/
// DEFINE SYSTEM IN THIS FUNCTION. REFERS TO THE NODE STRUCTURE 
// DEFINITION IN BEAMS.I
/**************************************************************/
func init_nodes(nit)
{
  extern nodes,idmax,field;
  nodes = [];
  id = 1;

  lgs1off = [3.0,0.0];
  lgs2off = [0.0,-3.0];

  // paths: 1=science, 2=ngs, 4=lgs1, 8=lgs2
  grow,nodes,node(id=id++,name="ngs",path=3); // NGS
  grow,nodes,node(id=id++,name="lgs1",path=4,ttpos=lgs1off,offset=lgs1off,action="lgs",plot=1); // LGS, including possible offsets
  grow,nodes,node(id=id++,name="lgsf1_fm",path=4,plot=1); // LGS launch jitter mirror 
  grow,nodes,node(id=id++,name="lgs1_uplink",path=4,action="lgs_uplink",ts=[turb_uplink_rms,1.],plot=1); // LGS uplink turb
  grow,nodes,node(id=id++,name="lgs2",path=8,ttpos=lgs2off,offset=lgs2off,action="lgs",plot=1); // LGS, including possible offsets
  grow,nodes,node(id=id++,name="lgsf2_fm",path=8,plot=1); // LGS launch jitter mirror 
  grow,nodes,node(id=id++,name="lgs2_uplink",path=8,action="lgs_uplink",ts=[turb_uplink_rms,1.],plot=1); // LGS uplink turb
  grow,nodes,node(id=id++,name="turb",path=7,action="turb",plot=1,ts=[turb_downlink_rms,1.]);
  grow,nodes,node(id=id++,name="telmount",path=3,plot=1); // LGS are installed on the mount, so mount motion doesn't affect them
  grow,nodes,node(id=id++,name="dsm",path=7,action="dsm",plot=1);
  // grow,nodes,node(id=id++,name="lgs_focus_stage",path=2);
  grow,nodes,node(id=id++,name="lgs1_fsm",path=4,plot=1,action="lgs1_fsm");
  grow,nodes,node(id=id++,name="lgs1_wfs",path=4,type="fp",offset=lgs1off,action="lgs1_wfs",plot=1);
  grow,nodes,node(id=id++,name="lgs2_fsm",path=8,plot=1,action="lgs2_fsm");
  grow,nodes,node(id=id++,name="lgs2_wfs",path=8,type="fp",offset=lgs2off,action="lgs2_wfs",plot=1);
  // grow,nodes,node(id=id++,name="ngs_focus_stage",path=1);
  grow,nodes,node(id=id++,name="ngs_wfs",path=2,action="ngs_wfs",type="fp",plot=1);
  // grow,nodes,node(id=id++,name="sci_objective",path=4);
  // grow,nodes,node(id=id++,name="imager",path=4,type="fp");

  idmax = id-1; // don't touch this

  // init time series:
  for (i=1;i<=idmax;i++) {
    nodes(i).pos_series = &array(0.,[2,2,nit]);
    if (anyof(nodes(i).ts)) {
      nodes(i).tseries = &array(0.,[2,2,nit]);
      (*nodes(i).tseries)(1,) = gen_time_series(nit,nodes(i).ts(1),nodes(i).ts(2));
      (*nodes(i).tseries)(2,) = gen_time_series(nit,nodes(i).ts(1),nodes(i).ts(2));
    }
  }
}

/**************************************************************/
// NODE ACTION FUNCTIONS: TURB, LGS, ETC
/**************************************************************/

func lgs(id,it)
// LGS position
{
  extern nodes;
  // nodes(id).ttpos = (*nodes(id).tseries)(,it);
  nodes(id).ttpos = nodes(id).offset;
  // nodes(id).focupdate = (0.0001*random_n()-nodes(id).focpos*0.00001);
  // nodes(id).focpos += nodes(id).focupdate;
}

func lgs_uplink(id,it)
// effect of uplink turbulence on an LGS
{
  extern nodes;
  // add random walk with spring
  nodes(id).ttpos = (*nodes(id).tseries)(,it);
  // nodes(id).ttpos += nodes(id).offset;
  // nodes(id).focupdate = (0.0001*random_n()-nodes(id).focpos*0.00001);
  // nodes(id).focpos += nodes(id).focupdate;
}

func turb(id,it)
// effect of turbulence - use PSD-based time series precalculated in init_nodes()
{
  extern nodes;
  // add random walk with spring, in TT:
  nodes(id).ttpos = (*nodes(id).tseries)(,it);
  // same in focus:
  // nodes(id).focupdate = (0.001*random_n()-nodes(id).focpos*0.0001);
  // nodes(id).focpos += nodes(id).focupdate;
}

func dsm(id,it)
// dsm offload to mount
{
  extern nodes;
  id2 = id_match("telmount");
  nodes(id2).ttpos += gain_dsm_offload*nodes(id).ttpos;
}

func ngs_wfs(id,it)
{
  extern nodes;
  // ttpos is the error reported by the ngs wfs
  // let's plug that into the DSM:
  id2 = id_match("dsm");
  nodes(id2).ttpos += gain_ngs*(nodes(id).ttpos-nodes(id).offset);
}

func lgs1_fsm(id,it)
// fsm offload to launch jitter mirror
{
  extern nodes;
  id2 = id_match("lgsf1_fm");
  nodes(id2).ttpos += gain_fsm_offload*nodes(id).ttpos;
}

func lgs2_fsm(id,it)
// fsm offload to launch jitter mirror
{
  extern nodes;
  id2 = id_match("lgsf2_fm");
  nodes(id2).ttpos += gain_fsm_offload*nodes(id).ttpos;
}

func lgs1_wfs(id,it)
{
  extern nodes;
  // correct focus with dsm
  // id2 = id_match("dsm");
  // nodes(id2).focpos += gain_lgs_foc*nodes(id).focpos;
  // correct tt with LGS FSM
  id2 = id_match("lgs1_fsm");
  nodes(id2).ttpos += gain_lgs_fsm*(nodes(id).ttpos-nodes(id).offset);
}

func lgs2_wfs(id,it)
{
  extern nodes;
  id2 = id_match("lgs2_fsm");
  nodes(id2).ttpos += gain_lgs_fsm*(nodes(id).ttpos-nodes(id).offset);
}

